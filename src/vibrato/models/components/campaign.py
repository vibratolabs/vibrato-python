"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from .dailyavailability import DailyAvailability
from .tasktemplate import TaskTemplate
from dataclasses_json import Undefined, dataclass_json
from typing import Dict, List, Optional
from vibrato import utils


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Campaign:
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    task_property_to_contact_field: Dict[str, str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('task_property_to_contact_field') }})
    task_template_uuid: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('task_template_uuid') }})
    daily_availability: List[DailyAvailability] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('daily_availability') }})
    timezone: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timezone') }})
    uuid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uuid'), 'exclude': lambda f: f is None }})
    task_template: Optional[TaskTemplate] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('task_template'), 'exclude': lambda f: f is None }})
    paused: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paused'), 'exclude': lambda f: f is None }})
    queued_campaign_calls: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('queued_campaign_calls'), 'exclude': lambda f: f is None }})
    completed_campaign_calls: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('completed_campaign_calls'), 'exclude': lambda f: f is None }})
    invalid_campaign_calls: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('invalid_campaign_calls'), 'exclude': lambda f: f is None }})
    in_progress_campaign_calls: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('in_progress_campaign_calls'), 'exclude': lambda f: f is None }})
    

